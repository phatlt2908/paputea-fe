import { useState, useEffect } from "react";
import staticApi from "@/services/staticApi";
import classApi from "@/services/classApi";

import SecurityMessage from "./security-message";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faChild } from "@fortawesome/free-solid-svg-icons";
import { faGraduationCap } from "@fortawesome/free-solid-svg-icons";
import { faLocationDot } from "@fortawesome/free-solid-svg-icons";
import { faPhone } from "@fortawesome/free-solid-svg-icons";
import { faBook } from "@fortawesome/free-solid-svg-icons";
import { faHashtag } from "@fortawesome/free-solid-svg-icons";
import { faCalendarDays } from "@fortawesome/free-solid-svg-icons";
import { faArrowRightLong } from "@fortawesome/free-solid-svg-icons";

import swal from "sweetalert2";

function ClassRegistrationForm() {
  const [data, setData] = useState({
    registerName: "",
    addressId: 0,
    addressDetail: "",
    registerPhone: "",
    gradeId: 0,
    subjectId: 0,
    sessionsPerWeek: 0,
    openingDay: new Date(),
    note: "",
  });

  const [error, setError] = useState({
    registerName: null,
    address: null,
    registerPhone: null,
    gradeId: null,
    subjectId: null,
    sessionsPerWeek: null,
    openingDay: null,
  });

  const [addressList, setAddressList] = useState([]);
  const [gradeList, setGradeList] = useState([]);
  const [subjectList, setSubjectList] = useState([]);

  useEffect(() => {
    staticApi
      .getAddressList()
      .then((res) => {
        res.data.unshift({ id: null, code: null, name: "--- Khu v·ª±c ---" });
        setAddressList(res.data);
      })
      .catch((err) => {
        console.error(err);
      });

    staticApi
      .getGradeList()
      .then((res) => {
        res.data.unshift({ id: null, code: null, name: "--- L·ªõp ---" });
        setGradeList(res.data);
      })
      .catch((err) => {
        console.error(err);
      });

    staticApi
      .getSubjectList()
      .then((res) => {
        res.data.unshift({ id: null, code: null, name: "--- M√¥n h·ªçc ---" });
        setSubjectList(res.data);
      })
      .catch((err) => {
        console.error(err);
      });
  }, []);

  const handleRegisterName = (e) => {
    setData((prev) => ({ ...prev, registerName: e.target.value }));
  };
  const handleAddressId = (e) => {
    setData((prev) => ({ ...prev, addressId: e.target.value }));
  };
  const handleAddressDetail = (e) => {
    setData((prev) => ({ ...prev, addressDetail: e.target.value }));
  };
  const handleRegisterPhone = (e) => {
    setData((prev) => ({ ...prev, registerPhone: e.target.value }));
  };
  const handleGrade = (e) => {
    setData((prev) => ({ ...prev, gradeId: e.target.value }));
  };
  const handleSubject = (e) => {
    setData((prev) => ({ ...prev, subjectId: e.target.value }));
  };
  const handleSessionsPerWeek = (e) => {
    setData((prev) => ({ ...prev, sessionsPerWeek: e.target.value }));
  };
  const handleOpeningDay = (e) => {
    setData((prev) => ({ ...prev, openingDay: e.target.value }));
  };
  const handleNote = (e) => {
    setData((prev) => ({ ...prev, note: e.target.value }));
  };

  const submit = () => {
    if (validate()) {
      classApi
        .createClass(data)
        .then((res) => {
          swal.fire({
            title: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
            text: "ƒê∆°n ƒëƒÉng k√Ω c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n, ch√∫ng t√¥i s·∫Ω li√™n h·ªá ƒë·∫øn b·∫°n s·ªõm. Xin c·∫£m ∆°n! ü•∞",
            icon: "success",
            confirmButtonText: "ƒê√≥ng",
          });
        })
        .catch((err) => {
          swal.fire({
            title: "ƒêƒÉng k√Ω th·∫•t b·∫°i!",
            text: "H·ªá th·ªëng x·∫£y ra l·ªói, xin vui l√≤ng th·ª≠ l·∫°i! üò£",
            icon: "error",
            confirmButtonText: "ƒê√≥ng",
          });
          console.error(err);
        });
    }
  };

  const validate = () => {
    setError((prev) => ({
      ...prev,
      registerName: data.registerName
        ? null
        : "Vui l√≤ng nh·∫≠p th√¥ng tin h·ªç v√† t√™n",
      address:
        data.addressId && data.addressDetail
          ? null
          : "Vui l√≤ng ch·ªçn v√† nh·∫≠p th√¥ng tin ƒë·ªãa ch·ªâ",
      registerPhone:
        data.registerPhone &&
        data.registerPhone.match(
          /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im
        )
          ? null
          : "Vui l√≤ng nh·∫≠p ƒë√∫ng th√¥ng tin s·ªë ƒëi·ªán tho·∫°i",
      gradeId: data.gradeId ? null : "Vui l√≤ng ch·ªçn l·ªõp",
      subjectId: data.subjectId ? null : "Vui l√≤ng ch·ªçn m√¥n h·ªçc",
      sessionsPerWeek: data.sessionsPerWeek
        ? null
        : "Vui l√≤ng nh·∫≠p s·ªë bu·ªïi h·ªçc/tu·∫ßn",
      openingDay: data.openingDay
        ? null
        : "Vui l√≤ng nh·∫≠p th·ªùi gian b·∫Øt ƒë·∫ßu h·ªçc",
    }));

    for (let key in error) {
      if (error[key]) {
        return false;
      }
    }

    return true;
  };

  return (
    <div className="section">
      <h1 className="title is-1 is-size-3-touch color-primary">
        ƒêƒÉng k√Ω t√¨m gia s∆∞, gi√°o vi√™n
      </h1>

      <SecurityMessage />

      <div className="columns is-desktop">
        <div className="field column mb-0">
          <label className="label">H·ªç v√† t√™n</label>
          <div className="control has-icons-left">
            <input
              className={"input " + (error.registerName ? "is-danger" : "")}
              type="text"
              placeholder="H·ªç v√† t√™n"
              value={data.registerName}
              onChange={handleRegisterName}
            />
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faChild} />
            </span>
          </div>
          {error.registerName && (
            <p className="help is-danger">{error.registerName}</p>
          )}
        </div>

        <div className="field column mb-0">
          <label className="label">S·ªë ƒëi·ªán tho·∫°i</label>
          <div className="control has-icons-left">
            <input
              className={"input " + (error.registerPhone ? "is-danger" : "")}
              type="text"
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
              value={data.registerPhone}
              onChange={handleRegisterPhone}
            />
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faPhone} />
            </span>
          </div>
          {error.registerPhone && (
            <p className="help is-danger">{error.registerPhone}</p>
          )}
        </div>
      </div>

      <div className="field">
        <label className="label">ƒê·ªãa ch·ªâ</label>
        <div className="field has-addons">
          <div className="control has-icons-left">
            <div className={"select " + (error.address ? "is-danger" : "")}>
              <select value={data.addressId} onChange={handleAddressId}>
                {addressList.map(function (address, i) {
                  return (
                    <option value={address.id} key={i}>
                      {address.name}
                    </option>
                  );
                })}
              </select>
            </div>
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faLocationDot} />
            </span>
          </div>
          <p className="control is-expanded">
            <input
              value={data.addressDetail}
              onChange={handleAddressDetail}
              className={"input " + (error.address ? "is-danger" : "")}
              type="text"
              placeholder="Chi ti·∫øt ƒë·ªãa ch·ªâ (th√†nh ph·ªë/qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£/th·ªã tr·∫•n)"
            ></input>
          </p>
        </div>
        {error.address && <p className="help is-danger">{error.address}</p>}
      </div>

      <div className="columns is-desktop">
        <div className="field column mb-0">
          <label className="label">H·ªçc sinh l·ªõp</label>
          <div className="control has-icons-left">
            <div
              className={"select w-100 " + (error.gradeId ? "is-danger" : "")}
            >
              <select
                className="w-100"
                value={data.gradeId}
                onChange={handleGrade}
              >
                {gradeList.map(function (grade, i) {
                  return (
                    <option value={grade.id} key={i}>
                      {grade.name}
                    </option>
                  );
                })}
              </select>
            </div>
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faGraduationCap} />
            </span>
          </div>
          {error.gradeId && <p className="help is-danger">{error.gradeId}</p>}
        </div>

        <div className="field column mb-0">
          <label className="label">ƒêƒÉng k√Ω m√¥n h·ªçc</label>
          <div className="control has-icons-left">
            <div
              className={"select w-100 " + (error.subjectId ? "is-danger" : "")}
            >
              <select
                className="w-100"
                value={data.subjectId}
                onChange={handleSubject}
              >
                {subjectList.map(function (subject, i) {
                  return (
                    <option value={subject.id} key={i}>
                      {subject.name}
                    </option>
                  );
                })}
              </select>
            </div>
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faBook} />
            </span>
          </div>
          {error.subjectId && (
            <p className="help is-danger">{error.subjectId}</p>
          )}
        </div>
      </div>

      <div className="columns is-desktop">
        <div className="field column mb-0">
          <label className="label">S·ªë bu·ªïi h·ªçc/tu·∫ßn</label>
          <div className="control has-icons-left">
            <input
              className={"input " + (error.sessionsPerWeek ? "is-danger" : "")}
              type="number"
              placeholder="S·ªë bu·ªïi h·ªçc/tu·∫ßn"
              value={data.sessionsPerWeek}
              onChange={handleSessionsPerWeek}
            />
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faHashtag} />
            </span>
          </div>
          {error.sessionsPerWeek && (
            <p className="help is-danger">{error.sessionsPerWeek}</p>
          )}
        </div>

        <div className="field column mb-0">
          <label className="label">Th·ªùi gian b·∫Øt ƒë·∫ßu h·ªçc</label>
          <div className="control has-icons-left">
            <input
              className={"input " + (error.openingDay ? "is-danger" : "")}
              type="date"
              placeholder="Th·ªùi gian b·∫Øt ƒë·∫ßu h·ªçc"
              value={data.openingDay}
              onChange={handleOpeningDay}
            />
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faCalendarDays} />
            </span>
          </div>
          {error.openingDay && (
            <p className="help is-danger">{error.openingDay}</p>
          )}
        </div>
      </div>

      <div className="field">
        <label className="label">Y√™u c·∫ßu v·ªÅ gia s∆∞ / gi√°o vi√™n</label>
        <div className="control">
          <textarea
            value={data.note}
            onChange={handleNote}
            className="textarea"
            placeholder="Y√™u c·∫ßu"
          ></textarea>
        </div>
        <p className="help">Kh√¥ng b·∫Øt bu·ªôc</p>
      </div>

      <div className="field mt-6">
        <div className="control has-text-centered">
          <button className="button is-primary" onClick={submit}>
            <span>ƒêƒÉng k√Ω</span>
            <span className="icon is-small is-left">
              <FontAwesomeIcon icon={faArrowRightLong} />
            </span>
          </button>
        </div>
      </div>
    </div>
  );
}

export default ClassRegistrationForm;
